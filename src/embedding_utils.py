import os
from sentence_transformers import SentenceTransformer
from dotenv import load_dotenv
import logging

load_dotenv()

MODEL_NAME = os.getenv("EMBEDDING_MODEL", "all-MiniLM-L6-v2") # Default model
model = None # Global model instance

def initialize_model():
    """Initializes the Sentence Transformer model."""
    global model
    if model is None:
        try:
            logging.info(f"Loading embedding model: {MODEL_NAME}...")
            model = SentenceTransformer(MODEL_NAME)
            logging.info("Embedding model loaded successfully.")
        except Exception as e:
            logging.error(f"Failed to load embedding model '{MODEL_NAME}': {e}")
            raise
    return model

def get_embedding_dimension():
    """Returns the dimension of the embeddings generated by the model."""
    m = initialize_model()
    if m:
        return m.get_sentence_embedding_dimension()
    return None

def generate_embeddings(texts: list[str]):
    """Generates embeddings for a list of text chunks."""
    m = initialize_model()
    if not m:
        return None
    try:
        logging.info(f"Generating embeddings for {len(texts)} chunks...")
        embeddings = m.encode(texts, show_progress_bar=True)
        logging.info("Embeddings generated.")
        return embeddings
    except Exception as e:
        logging.error(f"Failed during embedding generation: {e}")
        return None

def generate_single_embedding(text: str):
    """Generates an embedding for a single text string."""
    m = initialize_model()
    if not m:
        return None
    try:
        embedding = m.encode(text)
        return embedding
    except Exception as e:
        logging.error(f"Failed during single embedding generation: {e}")
        return None
